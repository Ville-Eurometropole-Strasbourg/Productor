# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Productor
                                 A QGIS plugin
 Passages en production
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-12-15
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Eurométropole de Strasbourg
        email                : clement.zitouni@strasbourg.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog, QErrorMessage

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction


# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .productor_dialog import ProductorDialog
import os.path
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__)) + '\\include\\python')

import sqlalchemy as db
import psycopg2
from sqlalchemy import exc
import geoalchemy2
import subprocess
# import shutil


class Productor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Productor_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Productor')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Productor', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/productor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Passage PROD'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Productor'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ProductorDialog()

        # Keep windows on top
        # self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)

        # Connect the buttons 
        self.dlg.pushButton.clicked.connect(self.dump)
        self.dlg.pushButton_2.clicked.connect(self.close)
        self.dlg.pushButton_3.clicked.connect(self.connection)
        self.dlg.toolButton.clicked.connect(self.choose)
        

        # Populate the tables
        self.dlg.comboBox_3.activated.connect(self.table)

        # show the dialog
        self.dlg.show()

        # Clean on closing 
        self.clean()




    def table(self) :
        self.schema = self.dlg.comboBox_3.currentText()
        tables = self.insp.get_table_names(schema = self.schema)
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems(sorted(tables))

    def dump(self) :
        try :
            # Set the default vars
            dict_enum = {}
            enum_list = []
            str_id = None
            cst_val = []
            pg_path = str(os.path.join(os.path.dirname(__file__))) + "\\include\\python\\pg_dump.exe"
            pg_path = pg_path.replace('/', '\\')
            database = self.dlg.lineEdit_2.text()
            schema = self.dlg.comboBox_3.currentText()
            table = self.dlg.comboBox_2.currentText()
            folder = self.folder_path + '\\' + table
            
            if os.path.exists(folder) is False : 
                os.mkdir(folder)
            self.dlg.progressBar.setValue(10)

            # Dump the basefile    
            pg_string = r'{} --host bdsigli.cus.fr --port 34000  --verbose --format=p -s -O -x --schema-only --no-owner --section=pre-data --section=post-data --encoding WIN1252 --table {}.{} {} > "{}\{}.sql"'.format(pg_path, schema, table, database, folder, table)            
            os.popen(pg_string)
            self.dlg.progressBar.setValue(20)
        
            # Récupération des données annexe de la table (énumérations et séquences)
            columns_table = self.insp.get_columns(table, schema)
            self.dlg.progressBar.setValue(30)
            for c in columns_table : 
                # Récupération de l'identifiant
                if 'seq' in str(c['default']) :
                    str_id = str(c['default'])
                    sub1 = "nextval('"
                    sub2 = "_seq'::regclass"
                    idx1 = str_id.index(sub1)
                    idx2 = str_id.index(sub2)
                    str_id = str_id[idx1 + len(sub1) : idx2]
                    
                # Récupération des énumérations
                if 'admin_sigli' in str(c['type']) :
                    self.cur.execute("SELECT unnest(enum_range(NULL::{}))".format(c['type']))
                    for i in self.cur.fetchall() : 
                        cst_val.append(i[0])
                    dict_enum.update( {c['type'].name : cst_val})
                    cst_val = []
            self.dlg.progressBar.setValue(40)
            # Ajout de sql des énumérations dans une liste
            for item in dict_enum :
                s = "CREATE TYPE admin_sigli.{} AS ENUM({});".format(item, dict_enum[item] ).replace('[', '').replace(']', '')
                enum_list.append(s)
            self.dlg.progressBar.setValue(50)
            if str_id :

                # Ajout des grants
                file_object = open('{}\{}_grants.sql'.format(folder, table), 'w', encoding="cp1252")
                file_object.write(f'''---Grants
                GRANT SELECT ON TABLE {str_id}_seq TO role_sigli_c;
                GRANT USAGE ON SCHEMA {schema} TO role_sigli_c;
                GRANT SELECT ON TABLE {schema}.{table} TO role_sigli_c;
                GRANT USAGE ON TABLE {str_id}_seq TO role_sigli_c;
                GRANT USAGE ON SCHEMA {schema} TO role_sigli_{schema}_a;
                GRANT UPDATE ON TABLE {str_id}_seq TO role_sigli_{schema}_a;
                GRANT SELECT ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT UPDATE ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT INSERT ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT USAGE ON TABLE {str_id}_seq TO role_sigli_{schema}_a;
                GRANT DELETE ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT SELECT ON TABLE {str_id}_seq TO role_sigli_{schema}_a;''')
                self.dlg.progressBar.setValue(60)
                # Ajout de la séquence 
                file_object = open('{}\{}_seq.sql'.format(folder, table), 'w', encoding="cp1252")
                file_object.write(f'''---Sequence
                CREATE SEQUENCE IF NOT EXISTS {str_id}_seq
                    START WITH 1
                    INCREMENT BY 1
                    NO MINVALUE
                    NO MAXVALUE
                    CACHE 1;

                ALTER SEQUENCE {str_id}_seq
                    OWNER TO sigli;''')
            else :

                # Ajout des grants
                file_object = open('{}\{}_grants.sql'.format(folder, table), 'w', encoding="cp1252")
                file_object.write(f'''---Grants
                GRANT USAGE ON SCHEMA {schema} TO role_sigli_c;
                GRANT SELECT ON TABLE {schema}.{table} TO role_sigli_c;
                GRANT USAGE ON SCHEMA {schema} TO role_sigli_{schema}_a;
                GRANT SELECT ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT UPDATE ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT INSERT ON TABLE {schema}.{table} TO role_sigli_{schema}_a;
                GRANT DELETE ON TABLE {schema}.{table} TO role_sigli_{schema}_a;''')
                self.dlg.progressBar.setValue(60)
            # Ajout des énumérations
            file_object = open('{}\{}_enums.sql'.format(folder, table), 'w', encoding="cp1252")
            file_object.write('--Creation des Enumérations\n')
            for enum in enum_list : 
                file_object.write('{}\n'.format(enum))
            file_object.close()
            self.dlg.progressBar.setValue(100)
            self.dlg.progressBar.setValue(0)

            '''
            # Zipper le dossier
            shutil.make_archive(table, 'zip', self.folder_path, folder)
            shutil.move('{}.zip'.format(table), self.folder_path)
            if os.path.exists(folder) : 
                shutil.rmtree(folder)
            '''

        except Exception as e : 
            self.error_dialog = QErrorMessage()
            self.error_dialog.showMessage(str(e))
            self.dlg.progressBar.setValue(0)
            pass 

    def choose(self):
        
        self.folder_path = QFileDialog.getExistingDirectory(self.dlg, 'Select Folder')
        # folderpath = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select Folder')
        self.folder_path = self.folder_path.replace('/', '\\')

        if self.folder_path:
            self.dlg.lineEdit.setText(self.folder_path)
            self.dlg.toolButton.clicked.disconnect()



    def close(self) : 
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.setStyleSheet("")
        self.dlg.progressBar.setValue(0)
        self.dlg.close()

    
    def clean(self) :
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_3.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.setStyleSheet("")
        self.dlg.progressBar.setValue(0)
        
    
    def connection(self) : 
        conn_string = 'postgresql://@bdsigli.cus.fr:34000/{}'.format(self.dlg.lineEdit_2.text())
        try :
            # Connection 
            engine = db.create_engine(conn_string)
            self.insp = db.inspect(engine)
            list = self.insp.get_schema_names()
            conn = psycopg2.connect(conn_string)
            self.cur = conn.cursor()
            # clean the previous list
            self.dlg.comboBox_2.clear()
            self.dlg.comboBox_3.clear()
            # Populate combo box 
            self.dlg.comboBox_3.addItems(list)
            # Color in green 
            self.dlg.lineEdit_2.setStyleSheet(f'QWidget {{background-color:  #009900;}}')
        except exc.SQLAlchemyError as err :
            self.clean()
            self.dlg.lineEdit_2.setStyleSheet(f'QWidget {{background-color:  #ff0000;}}')
            self.error_dialog = QErrorMessage()
            self.error_dialog.showMessage('Erreur de Connection')


